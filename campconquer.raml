#%RAML 1.0
# see https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md/
title: Camp Conquer Private API
version: v1
baseUri: https://campconquer.herokuapp.com
mediaType:  application/json

types:
  Player:
    type: object
    properties:
      name: string
      team:
        type: string
        enum:
          - blue
          - red
      embodied:
        type: boolean
        description: has this player gone through setup yet?

      coins:
        type: integer
        description: number of coins currently available to be spent on gear
      gems:
        type: integer
        description: number of gems currently available to be spent on gear

      activities_synced_at:
        type: datetime
        description: time of most recent fitbit activity pull
      steps_available:
        type: integer
        description: number of steps currently available to be claimed for coins
      active_minutes:
        type: integer
        description: number of minutes of exercise today
      gems_available:
        type: integer
        description: number of gems available to be claimed

      gear_owned:
        type: string[]  # should we include a full Gear object instead of just a name?
        description: gear short name
      gear_equipped:
        type: string[]
      ammo:
        type: string[]
      piece:
        type: Piece

  Point:
    description: a tuple representing an x,y coordinate on the game map; values are floats
    properties:
      x: number
      y: number

  # maybe this type needs a better name like “SelectablePath” since the piece’s path does not need “active” or “role”
  Path:
    type: object
    description: |
      for defense, an array with a single element;
      for offense, the path to follow
    properties:
      route: Point[]
      team:
        type: string
        enum:
          - blue
          - red
      role:
        type: string
        enum:
          - offense
          - defense
      active:
        type: boolean
        description: is this path currently selectable by players?

  Game:
    type: object
    description: the setup for a single game
    properties:
      id: number
      pieces:
        type: Piece[]
        description: state of all pieces at the beginning of the game
      locked: # to-do: change to state
        type: boolean
        description: if true, game setup cannot be changed
      winner:
        type: string
        description: team name of winner, or null if a draw
      moves:
        type: string
        description: all the moves and throws, as a huge json string blob :-( -- not always present in output
      match_length:
        type: integer
        description: duration of game in seconds
      player_outcomes:
        type: Outcome[]
        description: once played, stats for each player of this game; should be in alphabetical order by team name when returned by server
      team_summaries:
        type: Summary[]
        description: (read-only) once played, stats for each team for this game

  Piece:
    type: object
    description: a player's piece and its starting setup
    properties:
      team:
        type: string
      player_name:
        type: string
        description: for display purposes during gameplay
      player_id:
        type: integer
        description: readonly - not valid during update
      body_type:
        type: string
        enum:
          - gender_neutral_1
            gender_neutral_2
            male
            female
      face:
        type: string
      hair:
        type: string
      skin_color:
        type: string
      hair_color:
        type: string
      role:
        type: string
        enum:
          - offense
          - defense
      path: # todo: rename to "route"
        type: Point[]
        description: see Path
      speed:
        type: number
      health:
        type: integer
      range:
        type: number
        description: distance of target within which a shot will be launched
      health_bonus:
        type: number
      speed_bonus:
        type: integer
      range_bonus:
        type: number
      # should owned gear be on Piece or Player?
      gear_owned:
        type: string[]  # should we include a full Gear object instead of just a name?
        description: gear short name
      gear_equipped:
        type: string[]
      ammo:
        type: string[]
        description: list of ammo IDs (balloon, arrow, bomb)

  Gear:
    type: object
    description: all possible gear types, including bonuses etc - editable by admin only
    properties:
      name:
        type: string
        description: the short name, e.g. 'hat1', used for lookup of visual assets and identifying in lists
      gear_type:
        type: string
        enum:
          - head
          - shirt
          - belt
          - shoes
          - accessory
          - pet
      display_name:
        type: string
        description: human readable name
      description:
        type: string
        description: longer, visible in store and tooltips
      health_bonus:
        type: number
      speed_bonus:
        type: integer
      range_bonus:
        type: number
      coins:
        type: number
      gems:
        type: number
      level:
        type: number
      asset_name:
        type: string
      icon_name:
        type: string

  Outcome:
    type: object
    description: the results of a finished game for a particular player
    properties:
      created: datetime
      team:
        type: string
      captures:
        type: integer
        description: number of times this team captured the flag (i.e. games this team won)
      takedowns:
        type: integer
        description: count of players on *other* teams who died at this team's (or player's) hand
      throws:
        type: integer
        description: number of balloons thrown
      pickups:
        type: integer
        description: number of times flag was picked up
      flag_carry_distance:
        type: number
        format: float
        description: number of meters this team carried the flag
      attack_mvp:
        type: boolean
        description: was this player a top attacker this game?
      defend_mvp:
        type: boolean
        description: was this player a top defender this game?

  Summary:
    type: object
    description: results tallied across several games or players
    properties:
      created: datetime
      team:
        type: string
      captures:
        type: integer
        description: number of times this team captured the flag (i.e. games this team won)
      takedowns:
        type: integer
        description: count of players on *other* teams who died at this team's (or player's) hand
      throws:
        type: integer
        description: number of balloons thrown
      pickups:
        type: integer
        description: number of times flag was picked up
      flag_carry_distance:
        type: number
        format: float
        description: number of meters this team carried the flag

      attack_mvps:
        type: integer[]
        description: player ids (for team_summary only)
      defend_mvps:
        type: integer[]
        description: player ids (for team_summary only)

      attack_mvp:
        type: number
        description: number of times this player was a top attacker (for player_summary only)
      defend_mvp:
        type: number
        description: number of times this player was a top defender (for player_summary only)


  Season:
    type: object
    description: a series of games
    properties:
      id:
        type: number
      name:
        type: string
      current:
        type: boolean
      team_summaries:
        type: Summary[]
        description: results per team for all games this season, totalled
      player_summaries:
        type: Summary[]
        description: results per player for all games this season, totalled

  Ammo:
    type: object
    properties:
          name: string
          cost:
            type: integer
            description: cost in coins
          range_bonus: integer
          damage: integer
          splash_damage: integer
          splash_radius: integer

/sessions:
  post:
    description: sign in and receive an API token (note - GET works too)
    queryParameters:
        name: string
        password: string

/gears:
  get:
    description: get all the gears
    responses:
      200:
        body:
          type: Gear[]
          description: |
            a list of all gear types

/ammos:
  get:
    description: get all ammo types
    queryParameters:
    responses:
      200:
        body:
          type: Ammo[]

/games:
  description: all the games

  get:
    description: get all the games
    responses:
      200:
        body:
          type: Game[]
          description: |
            a list of all games, including stats for those that have been played

  /current:
    description: the currently active game; the one that is about to be played. If there is no currently active game then a new one is created, using the same setup as the previous game.
    get:
      description: |
        get a single game
        client should note the id and use it in further calls
      queryParameters:
        include_moves:
          type: boolean
          description: should the response include a `moves` field?
          required: false
          default: false
      responses:
        200:
          body:
            type: Game

  /previous:
    description: the most recently played game
    get:
      description: |
        get a single game
        client should note the id and use it in further calls
      queryParameters:
        include_moves:
          type: boolean
          description: should the response include a `moves` field?
          required: false
          default: false
      responses:
        200:
          body:
            type: Game

  /{game_id}:
    description: a single game
    get:
      description: get all the values for a single game, including nested Pieces, Outcome, etc.
      queryParameters:
        include_moves:
          type: boolean
          description: should the response include a `moves` field?
          required: false
          default: false
      responses:
        200:
          body:
            type: Game
    put:
      description: finish game

    /lock:
      post:
        description: lock the given game; copies all players' pieces into this game
      delete:
        description: unlock the current game, cancelling the current game and allowing players to update their setup again

    /outcome:
      put:
        description: |
          referee posts the results of the given game
          * the game is now considered played and a new current game is created
        queryParameters:
          winner: string
          match_length: integer
          moves: string
          player_outcomes[][team]: string
          player_outcomes[][player_id]: integer
          player_outcomes[][takedowns]: integer
          player_outcomes[][throws]: integer
          player_outcomes[][pickups]: integer
          player_outcomes[][captures]: integer
          player_outcomes[][flag_carry_distance]: integer
          player_outcomes[][ammo]: string

/players:

  get:
    description: get all players
    responses:
      200:
        body:
          type: Player[]

  # currently this is done by admin web UI - should remove from API?
  # -- we need a UI that creates *and* auths a player in one flow
  post:
    description: create a player
    queryParameters:
        name: string
        team: string

  /{player_id}:
    post:
      description: update a player - change her team, name, or embodied state only
      queryParameters:
          name: string
          team: string
          embodied: boolean

    get:
      description: get a single player
      responses:
        200:
          body:
            type: Player
            description: |
              - some attributes are calculated, like health_bonus

    /buy:
      post:
        description: buy a piece of gear or ammo (one only)
        queryParameters:
          gear[name]:
            type: string
            description: the short name of the gear to buy
          ammo[name]:
            type: string
            description: the short name of the ammo to buy
          currency:
            type: string
            enum:
              - coins
              - gems
        responses:
          200:
            description: ok
          400:
            description: not enough currency to afford the item

    /equip:
      post:
        description: equip a piece of gear
        queryParameters:
          gear[name]:
            type: string
            description: the short name of the gear to equip
        responses:
          200:
            description: ok
          400:
            description: |
                - gear not owned
                - game locked

    /unequip:
      post:
        description: unequip (remove) a piece of gear
        queryParameters:
          gear[name]:
            type: string
            description: the short name of the gear to unequip
        responses:
          200:
            description: ok
          400:
            description: |
                - gear not owned
                - game locked

    /claim_steps:
      post:
        description: attempt to claim all available steps and get gold coins
        responses:
          200:
            description: status and player JSON

    /claim_active_minutes:
      post:
        description: attempt to claim your gem for activity
        responses:
          200:
            description: status and player JSON

    /piece:
      post:
        description: |
          change the player's piece for the next game(s) -
          only some attributes are allowed:
          * role
          * path
          some attributes are only settable once:
          * speed
          * health
          * range
          * body_type
          * face
          * hair
          * skin_color
          * hair_color

        queryParameters:
          type: Piece

/seasons:

  /current:
    get:
      description: get stats for the current season (tallied across all games)
      responses:
          200:
            body:
              type: Season
